{"version":3,"file":"gravatar.service.js","sourceRoot":"","sources":["gravatar.service.ts"],"names":[],"mappings":";;;;;;;;AAAA,sCAA2C;AAC3C,2DAAoF;AAEpF,6BAA4B;AAG5B,IAAa,eAAe;IAA5B;IAeA,CAAC;IAdG;;;;;;;;OAQG;IACI,6BAAG,GAAV,UAAW,KAAa,EAAE,IAAkC,EAAE,QAA0C;QAA9E,qBAAA,EAAA,+CAAkC;QAAE,yBAAA,EAAA,uDAA0C;QACpG,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YAAC,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAA;QAAC,CAAC;QACpD,IAAM,SAAS,GAAG,SAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACrC,MAAM,CAAC,+BAA6B,SAAS,WAAM,IAAI,WAAM,QAAU,CAAC;IAC5E,CAAC;IACL,sBAAC;AAAD,CAAC,AAfD,IAeC;AAfY,eAAe;IAD3B,iBAAU,EAAE;GACA,eAAe,CAe3B;AAfY,0CAAe","sourcesContent":["import { Injectable } from '@angular/core';\nimport { DefaultGravatarFallback, DefaultGravatarSize } from './gravatar.constants';\n\nimport { Md5 } from './md5';\n\n@Injectable()\nexport class GravatarService {\n    /**\n     * Returns the url for a user's gravatar image.\n     *\n     * @param {string} email email associated with gravatar account\n     * @param {number} size size of gravatar image returned\n     * @param {string} fallback fallback in case something goes wrong\n     * @returns {string}\n     * @memberof GravatarService\n     */\n    public url(email: string, size: number = DefaultGravatarSize, fallback: string = DefaultGravatarFallback): string {\n        if (!email) { throw new Error('Email is required') }\n        const emailHash = Md5.hashStr(email);\n        return `//www.gravatar.com/avatar/${emailHash}?s=${size}&d=${fallback}`;\n    }\n}\n"]}